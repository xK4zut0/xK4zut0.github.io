"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginContractSchema = exports.basePropSchema = void 0;
var zod_1 = require("zod");
exports.basePropSchema = zod_1.z.object({
    title: zod_1.z.string().optional(),
    required: zod_1.z.boolean().optional(),
    description: zod_1.z.string().optional(),
    defaultValue: zod_1.z.union([zod_1.z.string(), zod_1.z.boolean(), zod_1.z.number()]).optional(),
    format: zod_1.z.string().optional(),
    isValueField: zod_1.z.boolean().optional(),
});
var minimumSizeSchema = zod_1.z.number().int().positive().lte(12).gte(1);
var stringPropSchema = zod_1.z.intersection(exports.basePropSchema, zod_1.z.object({
    type: zod_1.z.literal('string'),
    minLength: zod_1.z.number().optional(),
    maxLength: zod_1.z.number().optional(),
}));
var choicePropSchema = zod_1.z.intersection(exports.basePropSchema, zod_1.z.object({
    type: zod_1.z.literal('string'),
    enum: zod_1.z.array(zod_1.z.string().nonempty()),
    showAsRadio: zod_1.z.boolean().optional(),
    verticalLayout: zod_1.z.boolean().optional(),
}));
var numberPropSchema = zod_1.z.intersection(exports.basePropSchema, zod_1.z.object({
    type: zod_1.z.literal('number'),
    minimum: zod_1.z.number().optional(),
    maximum: zod_1.z.number().optional(),
}));
var integerPropSchema = zod_1.z.intersection(exports.basePropSchema, zod_1.z.object({
    type: zod_1.z.literal('integer'),
    minimum: zod_1.z.number().optional(),
    maximum: zod_1.z.number().optional(),
}));
var booleanPropSchema = zod_1.z.intersection(exports.basePropSchema, zod_1.z.object({
    type: zod_1.z.literal('boolean'),
}));
var propTypeSchema = zod_1.z.union([
    choicePropSchema,
    stringPropSchema,
    numberPropSchema,
    integerPropSchema,
    booleanPropSchema,
]);
var pluginDesignerSchema = zod_1.z.object({
    staticProperties: zod_1.z.array(zod_1.z.string()).optional(),
    configurationRules: zod_1.z.array(zod_1.z.string()).optional(),
    canvasRestrictions: zod_1.z
        .object({
        hideInToolbar: zod_1.z.boolean().optional(),
        minSize: minimumSizeSchema.optional(),
        isFullRow: zod_1.z.boolean().optional(),
    })
        .optional(),
    langs: zod_1.z.record(zod_1.z.record(zod_1.z.record(zod_1.z.string()))).optional(),
});
exports.pluginContractSchema = zod_1.z
    .object({
    version: zod_1.z.string().nonempty(),
    fallbackDisableSubmit: zod_1.z.boolean(),
    controlName: zod_1.z.string().nonempty(),
    widgetTooltip: zod_1.z.string().optional(),
    pluginAuthor: zod_1.z.string().optional(),
    pluginVersion: zod_1.z.string().optional(),
    searchTerms: zod_1.z.array(zod_1.z.string()).optional(),
    required: zod_1.z.array(zod_1.z.string()).optional(),
    description: zod_1.z.string().optional(),
    groupName: zod_1.z
        .union([
        zod_1.z.string(),
        zod_1.z.object({
            name: zod_1.z.string(),
            order: zod_1.z.number(),
        }),
    ])
        .optional(),
    iconUrl: zod_1.z.string().optional(),
    designer: pluginDesignerSchema.optional(),
    properties: zod_1.z.record(propTypeSchema).optional(),
    standardProperties: zod_1.z
        .object({
        fieldLabel: zod_1.z.boolean().optional(),
        toolTip: zod_1.z.boolean().optional(),
        description: zod_1.z.boolean().optional(),
        placeholder: zod_1.z.boolean().optional(),
        defaultValue: zod_1.z.boolean().optional(),
        visibility: zod_1.z.boolean().optional(),
        readOnly: zod_1.z.boolean().optional(),
        required: zod_1.z.boolean().optional(),
    })
        .optional(),
    events: zod_1.z.array(zod_1.z.string()).optional(),
})
    .strict();
//# sourceMappingURL=form-plugin-zod-contract.js.map