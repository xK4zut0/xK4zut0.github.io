import { z } from 'zod';
export var basePropSchema = z.object({
    title: z.string().optional(),
    required: z.boolean().optional(),
    description: z.string().optional(),
    defaultValue: z.union([z.string(), z.boolean(), z.number()]).optional(),
    format: z.string().optional(),
    isValueField: z.boolean().optional(),
});
var minimumSizeSchema = z.number().int().positive().lte(12).gte(1);
var stringPropSchema = z.intersection(basePropSchema, z.object({
    type: z.literal('string'),
    minLength: z.number().optional(),
    maxLength: z.number().optional(),
}));
var choicePropSchema = z.intersection(basePropSchema, z.object({
    type: z.literal('string'),
    enum: z.array(z.string().nonempty()),
    showAsRadio: z.boolean().optional(),
    verticalLayout: z.boolean().optional(),
}));
var numberPropSchema = z.intersection(basePropSchema, z.object({
    type: z.literal('number'),
    minimum: z.number().optional(),
    maximum: z.number().optional(),
}));
var integerPropSchema = z.intersection(basePropSchema, z.object({
    type: z.literal('integer'),
    minimum: z.number().optional(),
    maximum: z.number().optional(),
}));
var booleanPropSchema = z.intersection(basePropSchema, z.object({
    type: z.literal('boolean'),
}));
var propTypeSchema = z.union([
    choicePropSchema,
    stringPropSchema,
    numberPropSchema,
    integerPropSchema,
    booleanPropSchema,
]);
var pluginDesignerSchema = z.object({
    staticProperties: z.array(z.string()).optional(),
    configurationRules: z.array(z.string()).optional(),
    canvasRestrictions: z
        .object({
        hideInToolbar: z.boolean().optional(),
        minSize: minimumSizeSchema.optional(),
        isFullRow: z.boolean().optional(),
    })
        .optional(),
    langs: z.record(z.record(z.record(z.string()))).optional(),
});
export var pluginContractSchema = z
    .object({
    version: z.string().nonempty(),
    fallbackDisableSubmit: z.boolean(),
    controlName: z.string().nonempty(),
    widgetTooltip: z.string().optional(),
    pluginAuthor: z.string().optional(),
    pluginVersion: z.string().optional(),
    searchTerms: z.array(z.string()).optional(),
    required: z.array(z.string()).optional(),
    description: z.string().optional(),
    groupName: z
        .union([
        z.string(),
        z.object({
            name: z.string(),
            order: z.number(),
        }),
    ])
        .optional(),
    iconUrl: z.string().optional(),
    designer: pluginDesignerSchema.optional(),
    properties: z.record(propTypeSchema).optional(),
    standardProperties: z
        .object({
        fieldLabel: z.boolean().optional(),
        toolTip: z.boolean().optional(),
        description: z.boolean().optional(),
        placeholder: z.boolean().optional(),
        defaultValue: z.boolean().optional(),
        visibility: z.boolean().optional(),
        readOnly: z.boolean().optional(),
        required: z.boolean().optional(),
    })
        .optional(),
    events: z.array(z.string()).optional(),
})
    .strict();
//# sourceMappingURL=form-plugin-zod-contract.js.map